// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package database

import (
	"context"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO
    recipe (
        recipe_user_id,
        recipe_name,
        recipe_steps,
        created_on,
        updated_on
    )
VALUES
    ($1, $2, $3, now(), now()) RETURNING id, recipe_user_id, recipe_name, recipe_steps, created_on, updated_on
`

type CreateRecipeParams struct {
	RecipeUserID int32
	RecipeName   string
	RecipeSteps  string
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe, arg.RecipeUserID, arg.RecipeName, arg.RecipeSteps)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUserID,
		&i.RecipeName,
		&i.RecipeSteps,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}

const createRecipeUser = `-- name: CreateRecipeUser :one
INSERT INTO
    recipe_user (
        first_name,
        last_name,
        email,
        password,
        created_on,
        updated_on
    )
VALUES
    ($1, $2, $3, $4, now(), now()) RETURNING id, first_name, last_name, email, password, created_on, updated_on
`

type CreateRecipeUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) CreateRecipeUser(ctx context.Context, arg CreateRecipeUserParams) (RecipeUser, error) {
	row := q.db.QueryRowContext(ctx, createRecipeUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i RecipeUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM
    recipe
WHERE
    id = $1
    AND recipe_user_id = $2
`

type DeleteRecipeParams struct {
	ID           int32
	RecipeUserID int32
}

func (q *Queries) DeleteRecipe(ctx context.Context, arg DeleteRecipeParams) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, arg.ID, arg.RecipeUserID)
	return err
}

const deleteRecipeUser = `-- name: DeleteRecipeUser :exec
DELETE FROM
    recipe_user
WHERE
    id = $1
`

func (q *Queries) DeleteRecipeUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeUser, id)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT
    id, recipe_user_id, recipe_name, recipe_steps, created_on, updated_on
FROM
    recipe
WHERE
    id = $1
    AND recipe_user_id = $2
LIMIT
    1
`

type GetRecipeParams struct {
	ID           int32
	RecipeUserID int32
}

func (q *Queries) GetRecipe(ctx context.Context, arg GetRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, arg.ID, arg.RecipeUserID)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeUserID,
		&i.RecipeName,
		&i.RecipeSteps,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}

const getRecipeUserPwd = `-- name: GetRecipeUserPwd :one
SELECT
    id, first_name, last_name, email, password, created_on, updated_on
FROM
    recipe_user
WHERE
    email = $1
LIMIT
    1
`

func (q *Queries) GetRecipeUserPwd(ctx context.Context, email string) (RecipeUser, error) {
	row := q.db.QueryRowContext(ctx, getRecipeUserPwd, email)
	var i RecipeUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT
    id, recipe_user_id, recipe_name, recipe_steps, created_on, updated_on
FROM
    recipe
WHERE
    recipe_user_id = $1
ORDER BY
    recipe_name
`

func (q *Queries) ListRecipes(ctx context.Context, recipeUserID int32) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, recipeUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.RecipeUserID,
			&i.RecipeName,
			&i.RecipeSteps,
			&i.CreatedOn,
			&i.UpdatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :exec
UPDATE
    recipe 
        SET
            recipe_name = $3,
            recipe_steps = $4
        WHERE
            id = $1
            AND recipe_user_id = $2
`

type UpdateRecipeParams struct {
	ID           int32
	RecipeUserID int32
	RecipeName   string
	RecipeSteps  string
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, updateRecipe,
		arg.ID,
		arg.RecipeUserID,
		arg.RecipeName,
		arg.RecipeSteps,
	)
	return err
}
